'''
    code by Tae Hwan Jung(Jeff Jung) @graykode
    code reference : https://jkjung-avt.github.io/keras-image-cropping/
                    https://github.com/zizhaozhang/unet-tensorflow-keras/blob/master/loader.py
'''
import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator

# image from https://github.com/ardamavi/Dog-Cat-Classifier/tree/master/Data/Train_Data
# 0 : cat, 1 : dog

def img_show(image):
    image = image / 2 + 0.5
    plt.imshow(image)
    plt.show(block=False)

def random_crop(img, random_crop_size):
    # Note: image_data_format is 'channel_last'
    assert img.shape[2] == 3
    height, width = img.shape[0], img.shape[1]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[y:(y+dy), x:(x+dx), :]

def crop_generator(batches, crop_length):
    """Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        for i in range(batch_x.shape[0]):
            batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))
        yield (batch_crops, batch_y)

def preprocess(img, mean, std):
    out_img = img / img.max()  # scale to [0,1]
    out_img = (out_img - np.array(mean).reshape(1, 1, 3)) / np.array(std).reshape(1, 1, 3)
    return out_img

# make transformation (resizing image)
resized_image = ImageDataGenerator(rescale=1./255).flow_from_directory('../data', target_size=(227, 227),
                                        classes=['dog', 'cat'],  batch_size=2)
data, target = next(resized_image)
print('resized image to 227x227x3')
img_show(data[1])

# make transformation (crop image)
cropped_image = ImageDataGenerator(rescale=1./255).flow_from_directory('../data',
                                        classes=['dog', 'cat'],  batch_size=2)
cropped_image = crop_generator(cropped_image, 10)
data, target = next(cropped_image)
print('cropped image to 10x10x3')
img_show(data[1])

# make transformation (normalized image)
normalized_image = ImageDataGenerator(rescale=1./255).flow_from_directory('../data',
                                        classes=['dog', 'cat'],  batch_size=2)
data, target = next(normalized_image)
print('normalized image to mean and std (0.5, 0.5, 0.5)')
nimage = preprocess(data[1], mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
img_show(nimage)